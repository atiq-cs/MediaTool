//------------------------------------------------------------------------------
// synced on 2020-09-13 from,
//  FFmpeg/blob/f821ae8591add999ce717d932a80673fc29b00f6/doc/ffprobe.xsd
// <auto-generated>
//   This code was generated by a tool Runtime Version:4.0.30319.42000
//   This source code was auto-generated by xsd, Version=4.8.3928.0
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Buffers;
using System.Text.Json;

namespace FFMpeg {
	public class IntConverter : JsonConverter<int>
	{
		public override int Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions options) {
			if (reader.TokenType == JsonTokenType.String) {
					ReadOnlySpan<byte> span = reader.HasValueSequence ? reader.ValueSequence.ToArray() :
						reader.ValueSpan;
					if (System.Buffers.Text.Utf8Parser.TryParse(span, out int number, out int bytesConsumed)
						&& span.Length == bytesConsumed)
							return number;

					if (int.TryParse(reader.GetString(), out number))
							return number;
			}

			return reader.GetInt32();
		}

		public override void Write(Utf8JsonWriter writer, int value, JsonSerializerOptions options) {
				writer.WriteStringValue(value.ToString());
		}
	}


	public class LongConverter : JsonConverter<long>
	{
		public override long Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions options) {
			if (reader.TokenType == JsonTokenType.String) {
					ReadOnlySpan<byte> span = reader.HasValueSequence ? reader.ValueSequence.ToArray() :
						reader.ValueSpan;
					if (System.Buffers.Text.Utf8Parser.TryParse(span, out long number, out int bytesConsumed)
							&& span.Length == bytesConsumed)
						return number;

					if (long.TryParse(reader.GetString(), out number))
						return number;
			}

			return reader.GetInt64();
		}

		public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options) {
			writer.WriteStringValue(value.ToString());
		}
	}


	public class FloatConverter : JsonConverter<float>
	{
		public override float Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions options) {
			if (reader.TokenType == JsonTokenType.String) {
					ReadOnlySpan<byte> span = reader.HasValueSequence ? reader.ValueSequence.ToArray() :
						reader.ValueSpan;
					if (System.Buffers.Text.Utf8Parser.TryParse(span, out float number, out int bytesConsumed)
							&& span.Length == bytesConsumed)
						return number;

					if (float.TryParse(reader.GetString(), out number))
							return number;
			}

			return (float) reader.GetDouble();
		}

		public override void Write(Utf8JsonWriter writer, float value, JsonSerializerOptions options) {
			writer.WriteStringValue(value.ToString());
		}
	}


	public class BoolConverter : JsonConverter<bool>
	{
		public override bool Read(ref Utf8JsonReader reader, Type type, JsonSerializerOptions options) {
			if (reader.TokenType == JsonTokenType.String) {
					ReadOnlySpan<byte> span = reader.HasValueSequence ? reader.ValueSequence.ToArray() :
						reader.ValueSpan;

					if (System.Buffers.Text.Utf8Parser.TryParse(span, out bool boolValue, out int bytesConsumed)
							&& span.Length == bytesConsumed)
						return boolValue;

					if (bool.TryParse(reader.GetString(), out boolValue))
							return boolValue;
			}
			// my little patch for boolean to handle examples like this
			//  "closed_captions": 0,
			else if (reader.TokenType == JsonTokenType.Number)
				return reader.GetInt16()==0?false:true;

			return reader.GetBoolean();
		}

		public override void Write(Utf8JsonWriter writer, bool value, JsonSerializerOptions options) {
			writer.WriteStringValue(value.ToString());
		}
	}

	
	public class FFProbeType {
		public streamType[] Streams { get; set; }
		public formatType Format { get; set; }

    /*public programVersionType program_version { get; set; }
    public libraryVersionType[] library_versions { get; set; }
    public pixelFormatType[] pixel_formats { get; set; }
    public packetType[] packets { get; set; }
    public object[] frames { get; set; }
    public object[] packets_and_frames { get; set; }
    public programType[] programs { get; set; }
    public chapterType[] chapters { get; set; }
    public errorType error { get; set; }*/
	}


	public class streamType {
		public streamDispositionType disposition { get; set; }
		public Dictionary<string,string> tags { get; set; }
		// public packetSideDataType[] side_data_list { get; set; }
		public int index { get; set; }
		public string codec_name { get; set; }
		public string codec_long_name { get; set; }
		public string profile { get; set; }
		public string codec_type { get; set; }
		public string codec_time_base { get; set; }
		public string codec_tag { get; set; }
		public string codec_tag_string { get; set; }
		public string extradata { get; set; }
		public string extradata_hash { get; set; }
		public int width { get; set; }
		public bool widthFieldSpecified;
		public int height { get; set; }
		public bool heightFieldSpecified;
		public int coded_width { get; set; }
		public bool coded_widthFieldSpecified;
		public int coded_height { get; set; }
		public bool coded_heightFieldSpecified;
		// boolean appearing as int
		public bool closed_captions {get; set;}
		public bool closed_captionsFieldSpecified;
		public int has_b_frames { get; set; }
		public bool has_b_framesFieldSpecified;
		public string sample_aspect_ratio { get; set; }
		public string display_aspect_ratio { get; set; }
		public string pix_fmt { get; set; }
		public int level { get; set; }
		public bool levelFieldSpecified;
		public string color_range { get; set; }
		public string color_space { get; set; }
		public string color_transfer { get; set; }
		public string color_primaries { get; set; }
		public string chroma_location { get; set; }
		public string field_order { get; set; }
		public string timecode { get; set; }
		public int refs { get; set; }
		public bool refsFieldSpecified;
		public string sample_fmt { get; set; }
		public int sample_rate{get; set;}         // quoted json string
		public bool sample_rateFieldSpecified;
		public int channels { get; set; }
		public bool channelsFieldSpecified;
		public string channel_layout { get; set; }
		public int bits_per_sample { get; set; }
		public bool bits_per_sampleFieldSpecified;
		public string id { get; set; }
		public string r_frame_rate { get; set; }
		public string avg_frame_rate { get; set; }
		public string time_base { get; set; }
		public long start_pts { get; set; }
		public bool start_ptsFieldSpecified;
		public float start_time {get; set;}         // quoted json string
		public bool start_timeFieldSpecified;
		public long duration_ts { get; set; }
		public bool duration_tsFieldSpecified;
		public float duration { get; set; }
		public bool durationFieldSpecified;
		public int bit_rate { get; set; }
		public bool bit_rateFieldSpecified;
		public int max_bit_rate { get; set; }
		public bool max_bit_rateFieldSpecified;
		public int bits_per_raw_sample { get; set; }
		public bool bits_per_raw_sampleFieldSpecified;
		public int nb_frames { get; set; }
		public bool nb_framesFieldSpecified;
		public int nb_read_frames { get; set; }
		public bool nb_read_framesFieldSpecified;
		public int nb_read_packets { get; set; }
		public bool nb_read_packetsFieldSpecified;
	}

	public class subtitleType {
    public string media_type { get; set; }
    public long pts { get; set; }
    public bool ptsFieldSpecified;
    public float pts_time { get; set; }
    public bool pts_timeFieldSpecified;
    public int format { get; set; }
    public bool formatFieldSpecified;
    public int start_display_time { get; set; }
    public bool start_display_timeFieldSpecified;
    public int end_display_time { get; set; }
    public bool end_display_timeFieldSpecified;
    public int num_rects { get; set; }
    public bool num_rectsFieldSpecified;
    public subtitleType() {
        this.media_type = "subtitle";
    }
	}

	public class formatType {
    public Dictionary<string, string> tag { get; set; }
    public string filename { get; set; }
    public int nb_streams { get; set; }
    public int nb_programs { get; set; }
    public string format_name { get; set; }
    public string format_long_name { get; set; }
    public float start_time { get; set; }
    public bool start_timeFieldSpecified;
    public float duration { get; set; }
    public bool durationFieldSpecified;
    public long size { get; set; }
    public bool sizeFieldSpecified;
    public long bit_rate { get; set; }
    public bool bit_rateFieldSpecified;
    public int probe_score { get; set; }
    public bool probe_scoreFieldSpecified;
	}
	

	/* not required yet
	public class programVersionType {
    private string versionField;
    private string copyrightField;
    private string build_dateField;
    private string build_timeField;
    private string compiler_identField;
    private string configurationField;
	}

	public partial class errorType {
    private int codeField;
    private string stringField;
	}

	public partial class chapterType {
    private Dictionary<string,string> tagField;
    private int idField;
    private string time_baseField;
    private int startField;
    private float start_timeField;
    private bool start_timeFieldSpecified;
    private int endField;
    private float end_timeField;
	}*/

	public class streamDispositionType {
		// default is not supported as name, fix using example
		// public int default { get; set; }
		public int dub { get; set; }
		public int original { get; set; }
		public int comment { get; set; }
		public int lyrics { get; set; }
		public int karaoke { get; set; }
		public int forced { get; set; }
		public int hearing_impaired { get; set; }
		public int visual_impaired { get; set; }
		public int clean_effects { get; set; }
		public int attached_pic { get; set; }
		public int timed_thumbnails { get; set; }
	}

	/*public class programType {
    private Dictionary<string,string> tagField;
    private streamType[] streamsField;
    private int program_idField;
    private int program_numField;
    private int nb_streamsField;
    private float start_timeField;
    private bool start_timeFieldSpecified;
    private long start_ptsField;
    private bool start_ptsFieldSpecified;
    private float end_timeField;
    private bool end_timeFieldSpecified;
    private long end_ptsField;
    private bool end_ptsFieldSpecified;
    private int pmt_pidField;
    private int pcr_pidField;
	}

	public class packetSideDataType {
    private string side_data_typeField;
    private int side_data_sizeField;
    private bool side_data_sizeFieldSpecified;
	}

	public class frameType {
		private Dictionary<string,string> tagField;
		private logType[] logsField;
		private frameSideDataType[] side_data_listField;
		private string media_typeField;
		private int stream_indexField;
		private bool stream_indexFieldSpecified;
		private int key_frameField;
		private long ptsField;
		private bool ptsFieldSpecified;
		private float pts_timeField;
		private bool pts_timeFieldSpecified;
		private long pkt_ptsField;
		private bool pkt_ptsFieldSpecified;
		private float pkt_pts_timeField;
		private bool pkt_pts_timeFieldSpecified;
		private long pkt_dtsField;
		private bool pkt_dtsFieldSpecified;
		private float pkt_dts_timeField;
		private bool pkt_dts_timeFieldSpecified;
		private long best_effort_timestampField;
		private bool best_effort_timestampFieldSpecified;
		private float best_effort_timestamp_timeField;
		private bool best_effort_timestamp_timeFieldSpecified;
		private long pkt_durationField;
		private bool pkt_durationFieldSpecified;
		private float pkt_duration_timeField;
		private bool pkt_duration_timeFieldSpecified;
		private long pkt_posField;
		private bool pkt_posFieldSpecified;
		private int pkt_sizeField;
		private bool pkt_sizeFieldSpecified;
		private string sample_fmtField;
		private long nb_samplesField;
		private bool nb_samplesFieldSpecified;
		private int channelsField;
		private bool channelsFieldSpecified;
		private string channel_layoutField;
		private long widthField;
		private bool widthFieldSpecified;
		private long heightField;
		private bool heightFieldSpecified;
		private string pix_fmtField;
		private string sample_aspect_ratioField;
		private string pict_typeField;
		private long coded_picture_numberField;
		private bool coded_picture_numberFieldSpecified;
		private long display_picture_numberField;
		private bool display_picture_numberFieldSpecified;
		private int interlaced_frameField;
		private bool interlaced_frameFieldSpecified;
		private int top_field_firstField;
		private bool top_field_firstFieldSpecified;
		private int repeat_pictField;
		private bool repeat_pictFieldSpecified;
		private string color_rangeField;
		private string color_spaceField;
		private string color_primariesField;
		private string color_transferField;
		private string chroma_locationField;
	}

  public class logType {
    private string contextField;
    private int levelField;
    private bool levelFieldSpecified;
    private int categoryField;
    private bool categoryFieldSpecified;
    private string parent_contextField;
    private int parent_categoryField;
    private bool parent_categoryFieldSpecified;
    private string messageField;
  }

  public class frameSideDataType {
    private string[] timecodesField;
    private string side_data_typeField;
    private int side_data_sizeField;
    private bool side_data_sizeFieldSpecified;
    private string timecodeField;
  }

  public class packetType {
    private Dictionary<string,string> tagField;
    private packetSideDataType[] side_data_listField;
    private string codec_typeField;
    private int stream_indexField;
    private long ptsField;
    private bool ptsFieldSpecified;
    private float pts_timeField;
    private bool pts_timeFieldSpecified;
    private long dtsField;
    private bool dtsFieldSpecified;
    private float dts_timeField;
    private bool dts_timeFieldSpecified;
    private long durationField;
    private bool durationFieldSpecified;
    private float duration_timeField;
    private bool duration_timeFieldSpecified;
    private long convergence_durationField;
    private bool convergence_durationFieldSpecified;
    private float convergence_duration_timeField;
    private bool convergence_duration_timeFieldSpecified;
    private long sizeField;
    private long posField;
    private bool posFieldSpecified;
    private string flagsField;
    private string dataField;
    private string data_hashField;
  }

	public class pixelFormatComponentType {
    private int indexField;
    private int bit_depthField;
	}

  public class pixelFormatFlagsType {
    private int big_endianField;
    private int paletteField;
    private int bitstreamField;
    private int hwaccelField;
    private int planarField;
    private int rgbField;
    private int pseudopalField;
    private int alphaField;
	}

  public class pixelFormatType {
    private pixelFormatFlagsType flagsField;
    private pixelFormatComponentType[] componentsField;
    private string nameField;
    private int nb_componentsField;
    private int log2_chroma_wField;
    private bool log2_chroma_wFieldSpecified;
    private int log2_chroma_hField;
    private bool log2_chroma_hFieldSpecified;
    private int bits_per_pixelField;
    private bool bits_per_pixelFieldSpecified;
  }

	public class libraryVersionType {
    private string nameField;
    private int majorField;
    private int minorField;
    private int microField;
    private int versionField;
    private string identField;
	}*/
}
